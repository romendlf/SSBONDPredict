# -*- coding: utf-8 -*-
from django.shortcuts import render, redirect#结合一个给定的模板和一个给定的上下文字典，并返回一个渲染后的 HttpResponse 对象。

#通俗的讲就是把context的内容, 加载进templates中定义的文件, 并通过浏览器渲染呈现
from django.http import HttpResponseRedirect 
# Create your views here.
# from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.http import HttpResponse
from django.shortcuts import render_to_response

# from django.http import JsonResponse
import json
from backend import process_loadedpdb
import os
from django.views.decorators import csrf
from django.http import FileResponse
import chardet
import copy
import numpy as np
import httplib
import urllib2
import create_new_pdb1
import sort_dict

# import argparse
# parser = process_loadedpdb.parser

def index(request):
    return render(request, 'index.html')

def simple_upload(request):
    return render(request, 'simple_upload.html')

def xlsx_download(request):
    f = open('filename.txt','r')
    lines = f.readlines()
    print lines
    last_line = lines[-1]
    name = str(last_line).strip()
    print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
    print last_line
    print name
    filename = 'media/result/' + name + '.xlsx' 
    file=open(filename,'rb')

    #f = open('media/result/result.xlsx','rb')
    response =FileResponse(file)
    response['Content-Type']='application/octet-stream'#stand for binary data
    response['Content-Disposition']='attachment;filename=result.xlsx'#the name is not a variable,so we cann't change
    f.close()
    return response

def result(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        uploaded_file_url = fs.url(filename)
	f = open('filename.txt','a')
	f.write(filename)
	f.close()
	#print filename
        print uploaded_file_url
        bdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        father_path=os.path.abspath(os.path.dirname(bdir)+os.path.sep+".")
        result_dict1 = process_loadedpdb.process_pdb1(father_path + uploaded_file_url)
        result_dict1 = create_new_pdb1.energy(filename,result_dict1)
	ppp = sort_dict.sort_dict(filename,result_dict1)

	for key,value in result_dict1.items():
	    print key,value
        if result_dict1 == False:
            wrongmsg = True
            print wrongmsg
            return render(request, 'simple_upload.html', {
                'wrongmsg': json.dumps(wrongmsg),
            })
        return render(request, 'base_result.html', {
            'uploaded_file_url': json.dumps(uploaded_file_url),
            'result_dict1': json.dumps(result_dict1),
        })
    elif request.method == 'GET':
        print "downloading with urllib2"
	print '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$'
        PdbID = request.GET['a']
        url = 'https://files.rcsb.org/download/'+ PdbID +'.pdb'
        f = urllib2.urlopen(url) 
        downloadpdb = "media/%s.pdb"%PdbID
        print(downloadpdb)	
        filname = downloadpdb
        with open(downloadpdb, "wb") as code:   
          code.write(data)
        result_dict2 = process_loadedpdb.process_pdb1(downloadpdb)
        result_dict2 = create_new_pdb1.energy(filename,result_dict2)
        ppp = sort_dict.sort_dict(filename,result_dict2)
        for key,value in result_dict2.items():
		print key,value

        if result_dict2 == False:
            wrongmsg1 = True
            print wrongmsg1
            return render(request, 'simple_upload.html', {
                # 'reslut_dict': reslut_dict
                'wrongmsg1': json.dumps(wrongmsg1),
            })

        return render(request, 'base_result.html', {
            'uploaded_file_url': json.dumps('/'+downloadpdb),
            # 'reslut_dict': reslut_dict
            'result_dict1': json.dumps(result_dict2),
        })


def comments_upload(request):  
    if request.method == 'POST':  
        print "it's a test"                            #用于测试  
        print request.POST['name']           #测试是否能够接收到前端发来的name字段  
        print request.POST['password']     #用途同上  
  
        return HttpResponse("表单测试成功")     #最后返会给前端的数据，如果能在前端弹出框中显示我们就成功了  
    else:  
        return render(request,'test.html')

def integration(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        uploaded_file_url = fs.url(filename)
	print "!!!!!!!!!!!!!!!!!!!!!!!!!!"
	print myfile, myfile.name, upload_file_url
        # process_loadedpdb.process_pdb()
        # print uploaded_file_url
        # return HttpResponse("文件上传成功")  
        # return JsonResponse(uploaded_file_url, safe=False)
        resp = "文件上传成功"
        HttpResponse(json.dumps(resp), content_type="application/json")
    # return render(request, 'simple_upload.html')
    return render(request, 'integration.html')

def result_base(request):
    List = ['自强学堂', '渲染Json到模板']
    Dict = {'site': 12.232, 'author': 13.23450}
    
    result_dict= process_loadedpdb.process_pdb('/Users/dongxq/Sites/project/media/brilM.pdb')
    with open('brilm1'+'.json','a') as outfile1:
		json.dump(dict1,outfile1,ensure_ascii=False)
		outfile1.write('\n')
    with open('brilm'+'.json','a') as outfile:
    	json.dump(result_dict,outfile,ensure_ascii=False)
    	outfile.write('\n')
	
    # dict2 = copy.deepcopy(reslut_dict)
    # print id(reslut_dict),id(dict1)
    # dict2 = reslut_dict.copy()
    # for i in reslut_dict:
    # 	dict1[reslut_dict[i].key]=
    # print '***************************'
    # print Dict
    # print dict1
    # print result_dict
    # print chardet.detect(reslut_dict)
    return render(request, 'result_base.html', {
            'List': json.dumps(Dict),
            'result_dict': json.dumps(result_dict),
    })
